see("연습$")
see(//d)
see("//d")
see("\\d")
see([:digit:])
see("[:digit:]")
see("[가-힣]")
see("a")
see("A")
see("[ㄱ-ㅎ]")
#alphabet
see("[a-z")
#alphabet
see("[a-z]")
#alphabet
see("[a-Z]")
#alphabet
see("[a-Z]")
#alphabet
see("[a-zA-Z]")
#끝에서 찾기
see("연습")
see("[:upper:]")
see("[:lower:]")
#
see("[:alnum:]")
see("\\w")
see("\\W")
see("\\w")
#
see("[습해")
#
see("[습해]")
see("[습][해]")
# 특수기호
see("[:punct:]")
see("\\.")
see("\\<")
see("\\!")
see("\\?")
see("\\!?")
see("\\!\\?")
#library(help = "datasets")
df <- read.csv("D:/myr/simple_study/stringr/predata/concap.csv")
head(df)
str_replace(df$CapitalName, "\\-", ",")
df$CapitalName <- str_replace(df$CapitalName, "\\-", ",")
head(df)
df$CapitalName <- str_replace_all(df$CapitalName, "\\-", ",")
df %>% head()
#library(help = "datasets")
df <- read.csv("D:/myr/simple_study/stringr/predata/concap.csv")
head(df)
df$CapitalName <- str_replace_all(df$CapitalName, "\\-", ",")
head(df)
df$ContinentName <- str_replace_all(df$ContinentName, "[:lower:]", "[:upper:]")
head(Df)
head(df)
#library(help = "datasets")
df <- read.csv("D:/myr/simple_study/stringr/predata/concap.csv")
head(df)
df$ContinentName <- str_replace_all(df$ContinentName, "[:lower:]", "[:upper:]")
head(df)
#library(help = "datasets")
df <- read.csv("D:/myr/simple_study/stringr/predata/concap.csv")
df$ContinentName <- str_replace_all(df$ContinentName, "[:lower:]", toupper(df$ContinentName))
head(df)
#library(help = "datasets")
df <- read.csv("D:/myr/simple_study/stringr/predata/concap.csv")
head(df)
df$ContinentName <- toupper(df$ContinentName)
head(df)
manual_color <- c('aa' = 'black',
'bb' = 'gray',
'cc' = 'red')
str(manual_color)
library(ggplot2)
?scale_color_manual
iris %>% head()
library('dplyr')
iris %>% head()
gg <- iris %>% ggplot(aes(Sepal.Length, Petal.Length))
gg + geom_point(aes(color = Species))
manual_color <- c('setosa' = 'black',
'bb' = 'gray',
'cc' = 'red')
gg + geom_point(aes(color = Species))
gg + geom_point(aes(color = Species)) + scale_color_manual(values = manual_color)
gg + geom_point(aes(color = Species)) + scale_color_manual(values = manual_color, drop = F)
manual_color <- c('setosa' = 'yellow',
'bb' = 'gray',
'cc' = 'red')
gg <- iris %>% ggplot(aes(Sepal.Length, Petal.Length))
gg + geom_point(aes(color = Species)) + scale_color_manual(values = manual_color, drop = F)
gg + geom_point(aes(color = Species)) + scale_color_manual(values = manual_color, drop = T)
gg <- iris %>% ggplot(aes(Sepal.Length, Petal.Length))
gg + geom_point(aes(color = Species)) + scale_color_manual(values = manual_color, drop = T)
gg + geom_point(aes(color = Species)) + scale_color_manual(values = manual_color, drop = FALSE)
gg + geom_point(aes(color = Species)) + scale_color_manual(values = manual_color, limits = force)
manual_color <- c('setosa' = 'yellow',
'bb' = 'gray',
'cc' = 'red')
gg <- iris %>% ggplot(aes(Sepal.Length, Petal.Length))
gg + geom_point(aes(color = Species)) + scale_color_manual(values = manual_color, limits = force)
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point(aes(colour = factor(cyl)))
p + scale_colour_manual(values = c("red", "blue", "green"))
mtcars$cyl %>% table()
# It's recommended to use a named vector
cols <- c("8" = "red", "4" = "blue", "6" = "darkgreen", "10" = "orange")
p + scale_colour_manual(values = cols)
# You can set color and fill aesthetics at the same time
ggplot(
mtcars,
aes(mpg, wt, colour = factor(cyl), fill = factor(cyl))
) +
geom_point(shape = 21, alpha = 0.5, size = 2) +
scale_colour_manual(
values = cols,
aesthetics = c("colour", "fill")
)
ggplot(
mtcars,
aes(mpg, wt, colour = factor(cyl), fill = factor(cyl))
) +
geom_point()
ggplot(
mtcars,
aes(mpg, wt, colour = "black", fill = factor(cyl))
) +
geom_point()
ggplot(
mtcars,
aes(mpg, wt, fill = factor(cyl)), color = "black"
) +
geom_point()
ggplot(
mtcars,
aes(mpg, wt, fill = factor(cyl)), color = "black"
) +
geom_point() +
scale_colour_manual(
values = cols,
aesthetics = c("colour", "fill")
)
ggplot(
mtcars,
aes(mpg, wt, fill = factor(cyl)), color = "black"
) + geom_point() +
scale_colour_manual(
values = cols,
aesthetics = c("colour", "fill")
)
ggplot(
mtcars,
aes(mpg, wt, fill = factor(cyl)), colour = "black"
) + geom_point() +
scale_colour_manual(
values = cols,
aesthetics = c("colour", "fill")
)
ggplot(
mtcars,
aes(mpg, wt, colour = factor(cyl), fill = factor(cyl)), colour = "black"
) + geom_point() +
scale_colour_manual(
values = cols,
aesthetics = c("colour", "fill")
)
ggplot(
mtcars,
aes(mpg, wt, colour = factor(cyl), fill = factor(cyl))
) + geom_point() +
scale_colour_manual(
values = cols,
aesthetics = c("colour", "fill")
)
# You can set color and fill aesthetics at the same time
ggplot(
mtcars,
aes(mpg, wt, colour = factor(cyl), fill = factor(cyl))
) +
geom_point(shape = 21, alpha = 0.5, size = 2) +
scale_colour_manual(
values = cols,
aesthetics = c("colour", "fill")
)
ggplot(
mtcars,
aes(mpg, wt, colour = factor(cyl))
) +
geom_point(shape = 21, alpha = 0.5, size = 2) +
scale_colour_manual(
values = cols,
aesthetics = c("colour", "fill")
)
ggplot(
mtcars,
aes(mpg, wt, colour = factor(cyl))
) +
geom_point(shape = 21, alpha = 0.5, size = 2)
ggplot(
mtcars,
aes(mpg, wt, colour = factor(cyl))
) + geom_point(shape = 21, alpha = 0.5, size = 2)
ggplot(
mtcars,
aes(mpg, wt, colour = factor(cyl), fill = factor(cyl))
) + geom_point(shape = 21, alpha = 0.5, size = 2)
manual_shape <- c('4' = 1, '6' = 2, '8' = 3)
manual_shape <- c('4' = 1, '6' = 2, '8' = 3)
ggplot(
mtcars,
aes(mpg, wt, colour = factor(cyl), fill = factor(cyl), shape = factor(cyl))
) + geom_point(shape = 21, alpha = 0.5, size = 2)
ggplot(
mtcars,
aes(mpg, wt, colour = factor(cyl), fill = factor(cyl), shape = factor(cyl))
) + geom_point(shape = 21, alpha = 0.5, size = 2) +
scale_colour_manual(
values = cols,
aesthetics = c("colour", "fill")
) +
scale_shape_manual(values = manual_shape)
manual_shape
manual_shape <- c('4' = *, '6' = 2, '8' = 3)
ggplot(
mtcars,
aes(mpg, wt, colour = factor(cyl), fill = factor(cyl), shape = factor(cyl))
) + geom_point(shape = 21, alpha = 0.5, size = 2) +
scale_colour_manual(
values = cols,
aesthetics = c("colour", "fill")
) +
scale_shape_manual(values = manual_shape)
manual_shape <- c('4' = 17, '6' = 18, '8' = 19)
ggplot(
mtcars,
aes(mpg, wt, colour = factor(cyl), fill = factor(cyl), shape = factor(cyl))
) + geom_point(shape = 21, alpha = 0.5, size = 2) +
scale_colour_manual(
values = cols,
aesthetics = c("colour", "fill")
) +
scale_shape_manual(values = manual_shape)
mtcars$cyl %>% table()
ggplot(
mtcars,
aes(mpg, wt, colour = factor(cyl), fill = factor(cyl), shape = factor(cyl))
) + geom_point(alpha = 0.5, size = 2) +
scale_colour_manual(
values = cols,
aesthetics = c("colour", "fill")
) +
scale_shape_manual(values = manual_shape)
manual_shape <- c('4' = 17, '6' = 18, '8' = 3)
ggplot(
mtcars,
aes(mpg, wt, colour = factor(cyl), fill = factor(cyl), shape = factor(cyl))
) + geom_point(alpha = 0.5, size = 2) +
scale_colour_manual(
values = cols,
aesthetics = c("colour", "fill")
) +
scale_shape_manual(values = manual_shape)
ggplot(
mtcars,
aes(mpg, wt)
) + geom_point(aes(colour = factor(cyl), fill = factor(cyl), shape = factor(cyl)), alpha = 0.5, size = 2) +
scale_colour_manual(
values = cols,
aesthetics = c("colour", "fill")
) +
scale_shape_manual(values = manual_shape)
ggplot(
mtcars,
aes(mpg, wt)
) + geom_point(aes(colour = factor(cyl), fill = factor(cyl), shape = factor(cyl)), alpha = 0.5, size = 3) +
scale_colour_manual(
values = cols,
aesthetics = c("colour", "fill")
) +
scale_shape_manual(values = manual_shape)
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point(aes(colour = factor(cyl)))
p + scale_colour_manual(values = c("red", "blue", "green"))
# It's recommended to use a named vector
cols <- c("8" = "red", "4" = "blue", "6" = "darkgreen", "10" = "orange")
p + scale_colour_manual(values = cols)
# You can set color and fill aesthetics at the same time
ggplot(
mtcars,
aes(mpg, wt, colour = factor(cyl), fill = factor(cyl))
) +
geom_point(shape = 21, alpha = 0.5, size = 2) +
scale_colour_manual(
values = cols,
aesthetics = c("colour", "fill")
)
# You can set color and fill aesthetics at the same time
ggplot(
mtcars,
aes(mpg, wt, colour = factor(cyl), fill = factor(cyl))
) +
geom_point(shape = 21, alpha = 0.5, size = 2) +
scale_colour_manual(
values = cols
)
# You can set color and fill aesthetics at the same time
ggplot(
mtcars,
aes(mpg, wt, colour = factor(cyl), fill = factor(cyl))
) +
geom_point(shape = 21, alpha = 0.5, size = 2) +
scale_colour_manual(
values = cols,
aesthetics = c("colour", "fill")
)
# As with other scales you can use breaks to control the appearance
# of the legend.
p + scale_colour_manual(values = cols)
p + scale_colour_manual(
values = cols,
breaks = c("4", "6", "8"),
labels = c("four", "six", "eight")
)
p + scale_colour_manual(
values = cols,
#breaks = c("4", "6", "8"),
labels = c("four", "six", "eight")
)
p + scale_colour_manual(
values = cols,
breaks = c("4", "6", "8"),
labels = c("four", "six", "eight")
)
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point(aes(colour = factor(cyl)))
# As with other scales you can use breaks to control the appearance
# of the legend.
p + scale_colour_manual(values = cols)
p + scale_colour_manual(
values = cols,
#breaks = c("4", "6", "8"),
labels = c("four", "six", "eight")
)
p + scale_colour_manual(
values = cols,
breaks = c("4", "6", "8"),
labels = c("four", "six", "eight")
)
p + scale_colour_manual(
values = cols,
breaks = c("4", "8", "6"),
labels = c("four", "six", "eight")
)
p + scale_colour_manual(
values = cols,
breaks = c("4", "8"),
labels = c("four", "six", "eight")
)
# As with other scales you can use breaks to control the appearance
# of the legend.
p + scale_colour_manual(values = cols)
p + scale_colour_manual(
values = cols,
breaks = c("4", "8"),
labels = c("four", "six", "eight")
)
p + scale_colour_manual(
values = cols,
breaks = c("4", "8", "6"),
labels = c("four", "six", "eight")
)
# As with other scales you can use breaks to control the appearance
# of the legend.
p + scale_colour_manual(values = cols)
p + scale_colour_manual(
values = cols,
breaks = c("4", "6", "8"),
labels = c("four", "six", "eight")
)
p + scale_colour_manual(
values = cols,
breaks = c("4", "7", "8"),
labels = c("four", "six", "eight")
)
# As with other scales you can use breaks to control the appearance
# of the legend.
p + scale_colour_manual(values = cols)
p + scale_colour_manual(
values = cols,
breaks = c("4", "6", "8"),
labels = c("four", "six", "eight")
)
# And limits to control the possible values of the scale
p + scale_colour_manual(values = cols, limits = c("4", "8"))
p + scale_colour_manual(values = cols, limits = c("4", "6", "8", "10"))
# And limits to control the possible values of the scale
p + scale_colour_manual(values = cols, limits = c("4", "8"))
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point(aes(colour = factor(cyl)))
# And limits to control the possible values of the scale
p + scale_colour_manual(values = cols, limits = c("4", "8"))
head(diamonds)
gg <- diamonds %>% ggplot(aes(depth, price))
gg + geom_point(aes(color = clarity))
gg <- diamonds %>% sample_n(1000) %>% ggplot(aes(depth, price))
gg + geom_point(aes(color = clarity))
gg + geom_point(aes(color = clarity)) + scale_colour_manual(limits = c("I1", "SI2"))
gg <- iris %>% ggplot(aes(Sepal.Length, Petal.Length))
gg + geom_point(aes(color = Species)) + scale_color_manual(values = manual_color, limits = force)
ggplot(
mtcars,
aes(mpg, wt)
) + geom_point(aes(colour = factor(cyl), shape = factor(cyl)), alpha = 0.5, size = 3) +
scale_shape_manual(values = manual_shape)
ggplot(
mtcars,
aes(mpg, wt)
) + geom_point(aes(colour = cyl, shape = cyl), alpha = 0.5, size = 3) +
scale_shape_manual(values = manual_shape)
ggplot(
mtcars,
aes(mpg, wt)
) + geom_point(aes(colour = factor(cyl), shape = factor(cyl)), alpha = 0.5, size = 3) +
scale_shape_manual(values = manual_shape)
ggplot(
mtcars,
aes(mpg, wt)
) + geom_point(aes(colour = factor(cyl), shape = factor(cyl)), alpha = 0.7, size = 3) +
scale_shape_manual(values = manual_shape)
?apply(array, margin, ...)
?sapply(list, function)
?sapply
getwd()
rmarkdown::render("D:/myr/simple_study/loop_rmd/rmd/rmd_test.Rmd")
rmarkdown::render("D:/myr/simple_study/loop_rmd/rmd/rmd_test.Rmd")
for (i in 1:5) {
rmarkdown::render("D:/myr/simple_study/loop_rmd/rmd/rmd_test.Rmd",
output = paste0("rmd_test_", i))
}
rmarkdown::render("D:/myr/simple_study/loop_rmd/rmd/rmd_test.Rmd",
output_file = paste0("rmd_test_", i, ".html"))
for (i in 1:5) {
rmarkdown::render("D:/myr/simple_study/loop_rmd/rmd/rmd_test.Rmd",
output_file = paste0("rmd_test_", i, ".html"))
}
print(i)
for (i in 1:5) {
idx <- i
rmarkdown::render("D:/myr/simple_study/loop_rmd/rmd/rmd_test.Rmd",
output_file = paste0("rmd_test_", i, ".html"))
}
for (i in 1:5) {
idx <- i
rmarkdown::render("D:/myr/simple_study/loop_rmd/rmd/rmd_test.Rmd",
output_file = paste0("rmd_test_", i, ".html"))
}
vector_value <- c("aa", "bb", "cc", "dd", "ee")
vector_value
for (i in 1:5) {
idx <- i
rmarkdown::render("D:/myr/simple_study/loop_rmd/rmd/rmd_test.Rmd",
output_file = paste0("rmd_test_", i, ".html"))
}
i in 1:length(vector_value)
for (i in 1:length(vector_value)) {
idx <- vector_value[i]
rmarkdown::render("D:/myr/simple_study/loop_rmd/rmd/rmd_test.Rmd",
output_file = paste0("rmd_test_", i, ".html"))
}
for (i in vector_value) {
idx <- vector_value
rmarkdown::render("D:/myr/simple_study/loop_rmd/rmd/rmd_test.Rmd",
output_file = paste0("rmd_test_", i, ".html"))
}
idx <- vector_value[i]
for (i in vector_value) {
idx <- vector_value[i]
rmarkdown::render("D:/myr/simple_study/loop_rmd/rmd/rmd_test.Rmd",
output_file = paste0("rmd_test_", i, ".html"))
}
vector_value <- c("aa", "bb", "cc", "dd", "ee")
for (i in 1:length(vector_value)) {
idx <- vector_value[i]
rmarkdown::render("D:/myr/simple_study/loop_rmd/rmd/rmd_test.Rmd",
output_file = paste0("rmd_test_", vector_value[i], ".html"))
}
rmarkdown::render("D:/myr/simple_study/loop_rmd/rmd/rmd_test.Rmd",
output_file = paste0(sys.Date(),"rmd_test_", vector_value[i], ".html"))
Sys.Date()
rmarkdown::render("D:/myr/simple_study/loop_rmd/rmd/rmd_test.Rmd",
output_file = paste0(Sys.Date(),"rmd_test_", vector_value[i], ".html"))
for (i in 1:length(vector_value)) {
idx <- vector_value[i]
rmarkdown::render("D:/myr/simple_study/loop_rmd/rmd/rmd_test.Rmd",
output_file = paste0(Sys.Date(),"rmd_test_", vector_value[i], ".html"))
}
library(dplyr)
library(stringr)
library(lubridate)
library(tidyr)
library(ggplot2)
knitr::knit("github_action_test.Rmd")
getwd()
setwd("D:/youshin/myr/simple_study/github_acition_test/")
knitr::knit("github_action_test.Rmd")
knitr::render("github_action_test.Rmd")
knitr::render("github_action_test.Rmd", output_format = "html_document")
knitr::render_html("github_action_test.Rmd")
rmarkdown::render("github_action_test.Rmd")
